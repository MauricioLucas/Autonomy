;identity objects
None := Object()
True := Object()
False := Object()

;symbol object
Symbol := [
	_new: {
		self.name := args[1] ;wip: self is the wrong keyword to use here
		self.hash := hash(self.name)
		self
	},
	_string: {
		self.name
	},
	_hash: {
		self.hash
	}
]

;wip: doesn't work with numerically indexed arguments
;function definition
fn := {
	body := args[args.length]
	arguments := args[1:args.length - 1]
	scope := [base: ['_subscript: { $[args[1]] }.bind '$: $]] ;create internal scope
	arguments.each { scope[args[1]] := args[2] } ;add arguments to scope
	body.bind scope ;bind scope to block
}

;chained comparison (x < y < z)
_compare := fn {
	left := args[1]
	index := 2
	loop args.length // 2 { ;iterate over each comparison
		comparison := args[index]
		index += 1
		right := args[index]
		index += 1
		!($[comparison] left, right) ?
			return True
		left := right
	}
	False
}

loop := fn 'count, 'index_var, 'index, 'body, {
	body ||= index || index_var
	index ||= 1
	(body.bind '$: $, index_var: start)()
	count != 1 ?
		loop count - 1, index_var, body, index + 1
}

with := fn 'scope, 'body {
	body.bind scope
	body()
}

match := fn 'value, 'bodies, 'default, {
	body := bodies[value]
	body = None ?
		default ? default() : None
		: body()
}

Number.each := fn 'body, 'index {
	index ||= 1
	body index
	index != self ?
		self.each body, index + 1
}